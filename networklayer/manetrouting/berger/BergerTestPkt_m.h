//
// Generated file, do not edit! Created by opp_msgc 4.3 from networklayer/manetrouting/berger/BergerTestPkt.msg.
//

#ifndef _BERGERTESTPKT_M_H_
#define _BERGERTESTPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "IPv4Address.h"
#include "Coord.h"
#include <list>
typedef std::list<int> Route;
// }}



/**
 * Class generated from <tt>networklayer/manetrouting/berger/BergerTestPkt.msg</tt> by opp_msgc.
 * <pre>
 * packet BergerTestPkt
 * {
 *     Route route;
 * 	int hops;
 * 	IPv4Address nextHop;
 * 	IPv4Address dst;
 * }
 * </pre>
 */
class INET_API BergerTestPkt : public ::cPacket
{
  protected:
    Route route_var;
    int hops_var;
    IPv4Address nextHop_var;
    IPv4Address dst_var;

  private:
    void copy(const BergerTestPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BergerTestPkt&);

  public:
    BergerTestPkt(const char *name=NULL, int kind=0);
    BergerTestPkt(const BergerTestPkt& other);
    virtual ~BergerTestPkt();
    BergerTestPkt& operator=(const BergerTestPkt& other);
    virtual BergerTestPkt *dup() const {return new BergerTestPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual Route& getRoute();
    virtual const Route& getRoute() const {return const_cast<BergerTestPkt*>(this)->getRoute();}
    virtual void setRoute(const Route& route);
    virtual int getHops() const;
    virtual void setHops(int hops);
    virtual IPv4Address& getNextHop();
    virtual const IPv4Address& getNextHop() const {return const_cast<BergerTestPkt*>(this)->getNextHop();}
    virtual void setNextHop(const IPv4Address& nextHop);
    virtual IPv4Address& getDst();
    virtual const IPv4Address& getDst() const {return const_cast<BergerTestPkt*>(this)->getDst();}
    virtual void setDst(const IPv4Address& dst);
};

inline void doPacking(cCommBuffer *b, BergerTestPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BergerTestPkt& obj) {obj.parsimUnpack(b);}


#endif // _BERGERTESTPKT_M_H_

//
// Generated file, do not edit! Created by opp_msgc 4.3 from networklayer/bgpv4/BGPMessage/BGPOpen.msg.
//

#ifndef _BGPOPEN_M_H_
#define _BGPOPEN_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "BGPHeader_m.h"
#include "IPv4Address.h"

const int BGP_OPEN_OCTETS = 10;
// }}



/**
 * Struct generated from networklayer/bgpv4/BGPMessage/BGPOpen.msg by opp_msgc.
 */
struct INET_API BGPParameterValues
{
    BGPParameterValues();
    short authCode;
    long authenticationData;
};

void INET_API doPacking(cCommBuffer *b, BGPParameterValues& a);
void INET_API doUnpacking(cCommBuffer *b, BGPParameterValues& a);

/**
 * Struct generated from networklayer/bgpv4/BGPMessage/BGPOpen.msg by opp_msgc.
 */
struct INET_API BGPOptionalParameters
{
    BGPOptionalParameters();
    short parameterType;
    unsigned short parameterLength;
    BGPParameterValues parameterValues;
};

void INET_API doPacking(cCommBuffer *b, BGPOptionalParameters& a);
void INET_API doUnpacking(cCommBuffer *b, BGPOptionalParameters& a);

/**
 * Class generated from <tt>networklayer/bgpv4/BGPMessage/BGPOpen.msg</tt> by opp_msgc.
 * <pre>
 * packet BGPOpenMessage extends BGPHeader
 * {
 *     @omitGetVerb(true);
 *     type = BGP_OPEN;
 *     byteLength = BGP_HEADER_OCTETS + BGP_OPEN_OCTETS;
 * 
 *     char version = 4;
 *     unsigned short myAS;
 *     simtime_t holdTime;
 *     IPv4Address BGPIdentifier;
 *     BGPOptionalParameters optionalParameters[];
 * }
 * </pre>
 */
class INET_API BGPOpenMessage : public ::BGPHeader
{
  protected:
    char version_var;
    unsigned short myAS_var;
    simtime_t holdTime_var;
    IPv4Address BGPIdentifier_var;
    BGPOptionalParameters *optionalParameters_var; // array ptr
    unsigned int optionalParameters_arraysize;

  private:
    void copy(const BGPOpenMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BGPOpenMessage&);

  public:
    BGPOpenMessage(const char *name=NULL, int kind=0);
    BGPOpenMessage(const BGPOpenMessage& other);
    virtual ~BGPOpenMessage();
    BGPOpenMessage& operator=(const BGPOpenMessage& other);
    virtual BGPOpenMessage *dup() const {return new BGPOpenMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual char version() const;
    virtual void setVersion(char version);
    virtual unsigned short myAS() const;
    virtual void setMyAS(unsigned short myAS);
    virtual simtime_t holdTime() const;
    virtual void setHoldTime(simtime_t holdTime);
    virtual IPv4Address& BGPIdentifier();
    virtual const IPv4Address& BGPIdentifier() const {return const_cast<BGPOpenMessage*>(this)->BGPIdentifier();}
    virtual void setBGPIdentifier(const IPv4Address& BGPIdentifier);
    virtual void setOptionalParametersArraySize(unsigned int size);
    virtual unsigned int optionalParametersArraySize() const;
    virtual BGPOptionalParameters& optionalParameters(unsigned int k);
    virtual const BGPOptionalParameters& optionalParameters(unsigned int k) const {return const_cast<BGPOpenMessage*>(this)->optionalParameters(k);}
    virtual void setOptionalParameters(unsigned int k, const BGPOptionalParameters& optionalParameters);
};

inline void doPacking(cCommBuffer *b, BGPOpenMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BGPOpenMessage& obj) {obj.parsimUnpack(b);}


#endif // _BGPOPEN_M_H_

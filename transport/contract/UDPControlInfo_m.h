//
// Generated file, do not edit! Created by opp_msgc 4.3 from transport/contract/UDPControlInfo.msg.
//

#ifndef _UDPCONTROLINFO_M_H_
#define _UDPCONTROLINFO_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "IPvXAddress.h"
// }}



/**
 * Enum generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * enum UDPCommandCode
 * {
 *     UDP_C_DATA = 0;      
 *     UDP_C_BIND = 1;      
 *     UDP_C_CONNECT = 2;   
 *     UDP_C_SETOPTION = 3; 
 *     UDP_C_CLOSE = 4;     
 * }
 * </pre>
 */
enum UDPCommandCode {
    UDP_C_DATA = 0,
    UDP_C_BIND = 1,
    UDP_C_CONNECT = 2,
    UDP_C_SETOPTION = 3,
    UDP_C_CLOSE = 4
};

/**
 * Enum generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * enum UDPStatusInd
 * {
 *     UDP_I_DATA = 0;  
 *     UDP_I_ERROR = 1; 
 * }
 * </pre>
 */
enum UDPStatusInd {
    UDP_I_DATA = 0,
    UDP_I_ERROR = 1
};

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPControlInfo
 * {
 *     int sockId = -1;  
 * }
 * </pre>
 */
class INET_API UDPControlInfo : public ::cObject
{
  protected:
    int sockId_var;

  private:
    void copy(const UDPControlInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPControlInfo&);

  public:
    UDPControlInfo();
    UDPControlInfo(const UDPControlInfo& other);
    virtual ~UDPControlInfo();
    UDPControlInfo& operator=(const UDPControlInfo& other);
    virtual UDPControlInfo *dup() const {return new UDPControlInfo(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSockId() const;
    virtual void setSockId(int sockId);
};

inline void doPacking(cCommBuffer *b, UDPControlInfo& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPControlInfo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPBindCommand extends UDPControlInfo
 * {
 *     IPvXAddress localAddr;
 *     int localPort = -1;
 * }
 * </pre>
 */
class INET_API UDPBindCommand : public ::UDPControlInfo
{
  protected:
    IPvXAddress localAddr_var;
    int localPort_var;

  private:
    void copy(const UDPBindCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPBindCommand&);

  public:
    UDPBindCommand();
    UDPBindCommand(const UDPBindCommand& other);
    virtual ~UDPBindCommand();
    UDPBindCommand& operator=(const UDPBindCommand& other);
    virtual UDPBindCommand *dup() const {return new UDPBindCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getLocalAddr();
    virtual const IPvXAddress& getLocalAddr() const {return const_cast<UDPBindCommand*>(this)->getLocalAddr();}
    virtual void setLocalAddr(const IPvXAddress& localAddr);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
};

inline void doPacking(cCommBuffer *b, UDPBindCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPBindCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPConnectCommand extends UDPControlInfo
 * {
 *     IPvXAddress remoteAddr;
 *     int remotePort = -1;
 * }
 * </pre>
 */
class INET_API UDPConnectCommand : public ::UDPControlInfo
{
  protected:
    IPvXAddress remoteAddr_var;
    int remotePort_var;

  private:
    void copy(const UDPConnectCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPConnectCommand&);

  public:
    UDPConnectCommand();
    UDPConnectCommand(const UDPConnectCommand& other);
    virtual ~UDPConnectCommand();
    UDPConnectCommand& operator=(const UDPConnectCommand& other);
    virtual UDPConnectCommand *dup() const {return new UDPConnectCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getRemoteAddr();
    virtual const IPvXAddress& getRemoteAddr() const {return const_cast<UDPConnectCommand*>(this)->getRemoteAddr();}
    virtual void setRemoteAddr(const IPvXAddress& remoteAddr);
    virtual int getRemotePort() const;
    virtual void setRemotePort(int remotePort);
};

inline void doPacking(cCommBuffer *b, UDPConnectCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPConnectCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPSendCommand extends UDPControlInfo
 * {
 *     IPvXAddress destAddr; 
 *     int destPort = -1;     
 *     int interfaceId = -1; 
 * }
 * </pre>
 */
class INET_API UDPSendCommand : public ::UDPControlInfo
{
  protected:
    IPvXAddress destAddr_var;
    int destPort_var;
    int interfaceId_var;

  private:
    void copy(const UDPSendCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPSendCommand&);

  public:
    UDPSendCommand();
    UDPSendCommand(const UDPSendCommand& other);
    virtual ~UDPSendCommand();
    UDPSendCommand& operator=(const UDPSendCommand& other);
    virtual UDPSendCommand *dup() const {return new UDPSendCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getDestAddr();
    virtual const IPvXAddress& getDestAddr() const {return const_cast<UDPSendCommand*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPvXAddress& destAddr);
    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);
    virtual int getInterfaceId() const;
    virtual void setInterfaceId(int interfaceId);
};

inline void doPacking(cCommBuffer *b, UDPSendCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPSendCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPCloseCommand extends UDPControlInfo
 * {
 * }
 * </pre>
 */
class INET_API UDPCloseCommand : public ::UDPControlInfo
{
  protected:

  private:
    void copy(const UDPCloseCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPCloseCommand&);

  public:
    UDPCloseCommand();
    UDPCloseCommand(const UDPCloseCommand& other);
    virtual ~UDPCloseCommand();
    UDPCloseCommand& operator=(const UDPCloseCommand& other);
    virtual UDPCloseCommand *dup() const {return new UDPCloseCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, UDPCloseCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPCloseCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPDataIndication extends UDPControlInfo
 * {
 *     IPvXAddress srcAddr;   
 *     IPvXAddress destAddr;  
 *     int srcPort;           
 *     int destPort;          
 *     int ttl;               
 *     int interfaceId;       
 *     unsigned char typeOfService; 
 * }
 * </pre>
 */
class INET_API UDPDataIndication : public ::UDPControlInfo
{
  protected:
    IPvXAddress srcAddr_var;
    IPvXAddress destAddr_var;
    int srcPort_var;
    int destPort_var;
    int ttl_var;
    int interfaceId_var;
    unsigned char typeOfService_var;

  private:
    void copy(const UDPDataIndication& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPDataIndication&);

  public:
    UDPDataIndication();
    UDPDataIndication(const UDPDataIndication& other);
    virtual ~UDPDataIndication();
    UDPDataIndication& operator=(const UDPDataIndication& other);
    virtual UDPDataIndication *dup() const {return new UDPDataIndication(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getSrcAddr();
    virtual const IPvXAddress& getSrcAddr() const {return const_cast<UDPDataIndication*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const IPvXAddress& srcAddr);
    virtual IPvXAddress& getDestAddr();
    virtual const IPvXAddress& getDestAddr() const {return const_cast<UDPDataIndication*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPvXAddress& destAddr);
    virtual int getSrcPort() const;
    virtual void setSrcPort(int srcPort);
    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual int getInterfaceId() const;
    virtual void setInterfaceId(int interfaceId);
    virtual unsigned char getTypeOfService() const;
    virtual void setTypeOfService(unsigned char typeOfService);
};

inline void doPacking(cCommBuffer *b, UDPDataIndication& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPDataIndication& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPErrorIndication extends UDPControlInfo
 * {
 *     IPvXAddress srcAddr;   
 *     IPvXAddress destAddr;  
 *     int srcPort;           
 *     int destPort;          
 * }
 * </pre>
 */
class INET_API UDPErrorIndication : public ::UDPControlInfo
{
  protected:
    IPvXAddress srcAddr_var;
    IPvXAddress destAddr_var;
    int srcPort_var;
    int destPort_var;

  private:
    void copy(const UDPErrorIndication& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPErrorIndication&);

  public:
    UDPErrorIndication();
    UDPErrorIndication(const UDPErrorIndication& other);
    virtual ~UDPErrorIndication();
    UDPErrorIndication& operator=(const UDPErrorIndication& other);
    virtual UDPErrorIndication *dup() const {return new UDPErrorIndication(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getSrcAddr();
    virtual const IPvXAddress& getSrcAddr() const {return const_cast<UDPErrorIndication*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const IPvXAddress& srcAddr);
    virtual IPvXAddress& getDestAddr();
    virtual const IPvXAddress& getDestAddr() const {return const_cast<UDPErrorIndication*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPvXAddress& destAddr);
    virtual int getSrcPort() const;
    virtual void setSrcPort(int srcPort);
    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);
};

inline void doPacking(cCommBuffer *b, UDPErrorIndication& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPErrorIndication& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPSetOptionCommand extends UDPControlInfo
 * {
 * }
 * </pre>
 */
class INET_API UDPSetOptionCommand : public ::UDPControlInfo
{
  protected:

  private:
    void copy(const UDPSetOptionCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPSetOptionCommand&);

  public:
    UDPSetOptionCommand();
    UDPSetOptionCommand(const UDPSetOptionCommand& other);
    virtual ~UDPSetOptionCommand();
    UDPSetOptionCommand& operator=(const UDPSetOptionCommand& other);
    virtual UDPSetOptionCommand *dup() const {return new UDPSetOptionCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, UDPSetOptionCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPSetOptionCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPSetTimeToLiveCommand extends UDPSetOptionCommand
 * {
 *     int ttl;
 * }
 * </pre>
 */
class INET_API UDPSetTimeToLiveCommand : public ::UDPSetOptionCommand
{
  protected:
    int ttl_var;

  private:
    void copy(const UDPSetTimeToLiveCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPSetTimeToLiveCommand&);

  public:
    UDPSetTimeToLiveCommand();
    UDPSetTimeToLiveCommand(const UDPSetTimeToLiveCommand& other);
    virtual ~UDPSetTimeToLiveCommand();
    UDPSetTimeToLiveCommand& operator=(const UDPSetTimeToLiveCommand& other);
    virtual UDPSetTimeToLiveCommand *dup() const {return new UDPSetTimeToLiveCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
};

inline void doPacking(cCommBuffer *b, UDPSetTimeToLiveCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPSetTimeToLiveCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPSetTypeOfServiceCommand extends UDPSetOptionCommand
 * {
 *     char tos;  
 * }
 * </pre>
 */
class INET_API UDPSetTypeOfServiceCommand : public ::UDPSetOptionCommand
{
  protected:
    char tos_var;

  private:
    void copy(const UDPSetTypeOfServiceCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPSetTypeOfServiceCommand&);

  public:
    UDPSetTypeOfServiceCommand();
    UDPSetTypeOfServiceCommand(const UDPSetTypeOfServiceCommand& other);
    virtual ~UDPSetTypeOfServiceCommand();
    UDPSetTypeOfServiceCommand& operator=(const UDPSetTypeOfServiceCommand& other);
    virtual UDPSetTypeOfServiceCommand *dup() const {return new UDPSetTypeOfServiceCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual char getTos() const;
    virtual void setTos(char tos);
};

inline void doPacking(cCommBuffer *b, UDPSetTypeOfServiceCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPSetTypeOfServiceCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPSetBroadcastCommand extends UDPSetOptionCommand
 * {
 *     bool broadcast;
 * }
 * </pre>
 */
class INET_API UDPSetBroadcastCommand : public ::UDPSetOptionCommand
{
  protected:
    bool broadcast_var;

  private:
    void copy(const UDPSetBroadcastCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPSetBroadcastCommand&);

  public:
    UDPSetBroadcastCommand();
    UDPSetBroadcastCommand(const UDPSetBroadcastCommand& other);
    virtual ~UDPSetBroadcastCommand();
    UDPSetBroadcastCommand& operator=(const UDPSetBroadcastCommand& other);
    virtual UDPSetBroadcastCommand *dup() const {return new UDPSetBroadcastCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getBroadcast() const;
    virtual void setBroadcast(bool broadcast);
};

inline void doPacking(cCommBuffer *b, UDPSetBroadcastCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPSetBroadcastCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPSetMulticastInterfaceCommand extends UDPSetOptionCommand
 * {
 *     int interfaceId;
 * }
 * </pre>
 */
class INET_API UDPSetMulticastInterfaceCommand : public ::UDPSetOptionCommand
{
  protected:
    int interfaceId_var;

  private:
    void copy(const UDPSetMulticastInterfaceCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPSetMulticastInterfaceCommand&);

  public:
    UDPSetMulticastInterfaceCommand();
    UDPSetMulticastInterfaceCommand(const UDPSetMulticastInterfaceCommand& other);
    virtual ~UDPSetMulticastInterfaceCommand();
    UDPSetMulticastInterfaceCommand& operator=(const UDPSetMulticastInterfaceCommand& other);
    virtual UDPSetMulticastInterfaceCommand *dup() const {return new UDPSetMulticastInterfaceCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getInterfaceId() const;
    virtual void setInterfaceId(int interfaceId);
};

inline void doPacking(cCommBuffer *b, UDPSetMulticastInterfaceCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPSetMulticastInterfaceCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPSetMulticastLoopCommand extends UDPSetOptionCommand
 * {
 *     bool loop;
 * }
 * </pre>
 */
class INET_API UDPSetMulticastLoopCommand : public ::UDPSetOptionCommand
{
  protected:
    bool loop_var;

  private:
    void copy(const UDPSetMulticastLoopCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPSetMulticastLoopCommand&);

  public:
    UDPSetMulticastLoopCommand();
    UDPSetMulticastLoopCommand(const UDPSetMulticastLoopCommand& other);
    virtual ~UDPSetMulticastLoopCommand();
    UDPSetMulticastLoopCommand& operator=(const UDPSetMulticastLoopCommand& other);
    virtual UDPSetMulticastLoopCommand *dup() const {return new UDPSetMulticastLoopCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getLoop() const;
    virtual void setLoop(bool loop);
};

inline void doPacking(cCommBuffer *b, UDPSetMulticastLoopCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPSetMulticastLoopCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPJoinMulticastGroupsCommand extends UDPSetOptionCommand
 * {
 *     IPvXAddress multicastAddr[];
 *     int interfaceId[];
 * }
 * </pre>
 */
class INET_API UDPJoinMulticastGroupsCommand : public ::UDPSetOptionCommand
{
  protected:
    IPvXAddress *multicastAddr_var; // array ptr
    unsigned int multicastAddr_arraysize;
    int *interfaceId_var; // array ptr
    unsigned int interfaceId_arraysize;

  private:
    void copy(const UDPJoinMulticastGroupsCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPJoinMulticastGroupsCommand&);

  public:
    UDPJoinMulticastGroupsCommand();
    UDPJoinMulticastGroupsCommand(const UDPJoinMulticastGroupsCommand& other);
    virtual ~UDPJoinMulticastGroupsCommand();
    UDPJoinMulticastGroupsCommand& operator=(const UDPJoinMulticastGroupsCommand& other);
    virtual UDPJoinMulticastGroupsCommand *dup() const {return new UDPJoinMulticastGroupsCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setMulticastAddrArraySize(unsigned int size);
    virtual unsigned int getMulticastAddrArraySize() const;
    virtual IPvXAddress& getMulticastAddr(unsigned int k);
    virtual const IPvXAddress& getMulticastAddr(unsigned int k) const {return const_cast<UDPJoinMulticastGroupsCommand*>(this)->getMulticastAddr(k);}
    virtual void setMulticastAddr(unsigned int k, const IPvXAddress& multicastAddr);
    virtual void setInterfaceIdArraySize(unsigned int size);
    virtual unsigned int getInterfaceIdArraySize() const;
    virtual int getInterfaceId(unsigned int k) const;
    virtual void setInterfaceId(unsigned int k, int interfaceId);
};

inline void doPacking(cCommBuffer *b, UDPJoinMulticastGroupsCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPJoinMulticastGroupsCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transport/contract/UDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class UDPLeaveMulticastGroupsCommand extends UDPSetOptionCommand
 * {
 *     IPvXAddress multicastAddr[];
 * }
 * </pre>
 */
class INET_API UDPLeaveMulticastGroupsCommand : public ::UDPSetOptionCommand
{
  protected:
    IPvXAddress *multicastAddr_var; // array ptr
    unsigned int multicastAddr_arraysize;

  private:
    void copy(const UDPLeaveMulticastGroupsCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPLeaveMulticastGroupsCommand&);

  public:
    UDPLeaveMulticastGroupsCommand();
    UDPLeaveMulticastGroupsCommand(const UDPLeaveMulticastGroupsCommand& other);
    virtual ~UDPLeaveMulticastGroupsCommand();
    UDPLeaveMulticastGroupsCommand& operator=(const UDPLeaveMulticastGroupsCommand& other);
    virtual UDPLeaveMulticastGroupsCommand *dup() const {return new UDPLeaveMulticastGroupsCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setMulticastAddrArraySize(unsigned int size);
    virtual unsigned int getMulticastAddrArraySize() const;
    virtual IPvXAddress& getMulticastAddr(unsigned int k);
    virtual const IPvXAddress& getMulticastAddr(unsigned int k) const {return const_cast<UDPLeaveMulticastGroupsCommand*>(this)->getMulticastAddr(k);}
    virtual void setMulticastAddr(unsigned int k, const IPvXAddress& multicastAddr);
};

inline void doPacking(cCommBuffer *b, UDPLeaveMulticastGroupsCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPLeaveMulticastGroupsCommand& obj) {obj.parsimUnpack(b);}


#endif // _UDPCONTROLINFO_M_H_

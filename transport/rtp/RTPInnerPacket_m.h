//
// Generated file, do not edit! Created by opp_msgc 4.3 from transport/rtp/RTPInnerPacket.msg.
//

#ifndef _RTPINNERPACKET_M_H_
#define _RTPINNERPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "INETDefs.h"
#include "IPv4Address.h"
#include "RTPPacket.h"
#include "RTPSenderControlMessage_m.h"
#include "RTPSenderStatusMessage_m.h"
// }}



/**
 * Enum generated from <tt>transport/rtp/RTPInnerPacket.msg</tt> by opp_msgc.
 * <pre>
 * enum RTP_INP_TYPE
 * {
 *     RTP_INP_UNDEF = 0;
 *     RTP_INP_INITIALIZE_PROFILE = 1;
 *     RTP_INP_PROFILE_INITIALIZED = 2;
 *     RTP_INP_INITIALIZE_RTCP = 3;
 *     RTP_INP_RTCP_INITIALIZED = 4;
 *     RTP_INP_CREATE_SENDER_MODULE = 5;
 *     RTP_INP_SENDER_MODULE_CREATED = 6;
 *     RTP_INP_DELETE_SENDER_MODULE = 7;
 *     RTP_INP_SENDER_MODULE_DELETED = 8;
 *     RTP_INP_INITIALIZE_SENDER_MODULE = 9;
 *     RTP_INP_SENDER_MODULE_INITIALIZED = 10;
 *     RTP_INP_SENDER_MODULE_CONTROL = 11;
 *     RTP_INP_SENDER_MODULE_STATUS = 12;
 *     RTP_INP_LEAVE_SESSION = 13;
 *     RTP_INP_SESSION_LEFT = 14;
 *     RTP_INP_DATA_OUT = 15;
 *     RTP_INP_DATA_IN = 16;
 * };
 * </pre>
 */
enum RTP_INP_TYPE {
    RTP_INP_UNDEF = 0,
    RTP_INP_INITIALIZE_PROFILE = 1,
    RTP_INP_PROFILE_INITIALIZED = 2,
    RTP_INP_INITIALIZE_RTCP = 3,
    RTP_INP_RTCP_INITIALIZED = 4,
    RTP_INP_CREATE_SENDER_MODULE = 5,
    RTP_INP_SENDER_MODULE_CREATED = 6,
    RTP_INP_DELETE_SENDER_MODULE = 7,
    RTP_INP_SENDER_MODULE_DELETED = 8,
    RTP_INP_INITIALIZE_SENDER_MODULE = 9,
    RTP_INP_SENDER_MODULE_INITIALIZED = 10,
    RTP_INP_SENDER_MODULE_CONTROL = 11,
    RTP_INP_SENDER_MODULE_STATUS = 12,
    RTP_INP_LEAVE_SESSION = 13,
    RTP_INP_SESSION_LEFT = 14,
    RTP_INP_DATA_OUT = 15,
    RTP_INP_DATA_IN = 16
};

/**
 * Class generated from <tt>transport/rtp/RTPInnerPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet RTPInnerPacket
 * {
 *     @customize(true);  
 * 
 *     
 *     short type enum(RTP_INP_TYPE) = RTP_INP_UNDEF;
 * 
 *     
 *     string commonName;
 * 
 *     
 *     int mtu;
 * 
 *     
 *     int bandwidth;
 * 
 *     
 *     int rtcpPercentage;
 * 
 *     
 *     IPv4Address address = IPv4Address::UNSPECIFIED_ADDRESS;
 * 
 *     
 *     int port = PORT_UNDEF;
 * 
 *     
 *     uint32 ssrc;
 * 
 *     
 *     int payloadType;
 * 
 *     
 *     string fileName;
 * 
 *     
 *     int clockRate;
 * 
 *     
 *     int timeStampBase;
 * 
 *     
 *     int sequenceNumberBase;
 * };
 * </pre>
 *
 * RTPInnerPacket_Base is only useful if it gets subclassed, and RTPInnerPacket is derived from it.
 * The minimum code to be written for RTPInnerPacket is the following:
 *
 * <pre>
 * class INET_API RTPInnerPacket : public RTPInnerPacket_Base
 * {
 *   private:
 *     void copy(const RTPInnerPacket& other) { ... }

 *   public:
 *     RTPInnerPacket(const char *name=NULL, int kind=0) : RTPInnerPacket_Base(name,kind) {}
 *     RTPInnerPacket(const RTPInnerPacket& other) : RTPInnerPacket_Base(other) {copy(other);}
 *     RTPInnerPacket& operator=(const RTPInnerPacket& other) {if (this==&other) return *this; RTPInnerPacket_Base::operator=(other); copy(other); return *this;}
 *     virtual RTPInnerPacket *dup() const {return new RTPInnerPacket(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from RTPInnerPacket_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(RTPInnerPacket);
 * </pre>
 */
class INET_API RTPInnerPacket_Base : public ::cPacket
{
  protected:
    short type_var;
    opp_string commonName_var;
    int mtu_var;
    int bandwidth_var;
    int rtcpPercentage_var;
    IPv4Address address_var;
    int port_var;
    uint32 ssrc_var;
    int payloadType_var;
    opp_string fileName_var;
    int clockRate_var;
    int timeStampBase_var;
    int sequenceNumberBase_var;

  private:
    void copy(const RTPInnerPacket_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RTPInnerPacket_Base&);
    // make constructors protected to avoid instantiation
    RTPInnerPacket_Base(const char *name=NULL, int kind=0);
    RTPInnerPacket_Base(const RTPInnerPacket_Base& other);
    // make assignment operator protected to force the user override it
    RTPInnerPacket_Base& operator=(const RTPInnerPacket_Base& other);

  public:
    virtual ~RTPInnerPacket_Base();
    virtual RTPInnerPacket_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class RTPInnerPacket");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getType() const;
    virtual void setType(short type);
    virtual const char * getCommonName() const;
    virtual void setCommonName(const char * commonName);
    virtual int getMtu() const;
    virtual void setMtu(int mtu);
    virtual int getBandwidth() const;
    virtual void setBandwidth(int bandwidth);
    virtual int getRtcpPercentage() const;
    virtual void setRtcpPercentage(int rtcpPercentage);
    virtual IPv4Address& getAddress();
    virtual const IPv4Address& getAddress() const {return const_cast<RTPInnerPacket_Base*>(this)->getAddress();}
    virtual void setAddress(const IPv4Address& address);
    virtual int getPort() const;
    virtual void setPort(int port);
    virtual uint32 getSsrc() const;
    virtual void setSsrc(uint32 ssrc);
    virtual int getPayloadType() const;
    virtual void setPayloadType(int payloadType);
    virtual const char * getFileName() const;
    virtual void setFileName(const char * fileName);
    virtual int getClockRate() const;
    virtual void setClockRate(int clockRate);
    virtual int getTimeStampBase() const;
    virtual void setTimeStampBase(int timeStampBase);
    virtual int getSequenceNumberBase() const;
    virtual void setSequenceNumberBase(int sequenceNumberBase);
};


#endif // _RTPINNERPACKET_M_H_

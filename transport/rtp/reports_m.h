//
// Generated file, do not edit! Created by opp_msgc 4.3 from transport/rtp/reports.msg.
//

#ifndef _REPORTS_M_H_
#define _REPORTS_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif



/**
 * Class generated from <tt>transport/rtp/reports.msg</tt> by opp_msgc.
 * <pre>
 * class SenderReport
 * {
 *     @customize(true);
 * 
 *     
 *     uint64 NTPTimeStamp;
 * 
 *     
 *     uint32 RTPTimeStamp;
 * 
 *     
 *     uint32 packetCount;
 * 
 *     
 *     uint32 byteCount;
 * };
 * </pre>
 *
 * SenderReport_Base is only useful if it gets subclassed, and SenderReport is derived from it.
 * The minimum code to be written for SenderReport is the following:
 *
 * <pre>
 * class INET_API SenderReport : public SenderReport_Base
 * {
 *   private:
 *     void copy(const SenderReport& other) { ... }

 *   public:
 *     SenderReport() : SenderReport_Base() {}
 *     SenderReport(const SenderReport& other) : SenderReport_Base(other) {copy(other);}
 *     SenderReport& operator=(const SenderReport& other) {if (this==&other) return *this; SenderReport_Base::operator=(other); copy(other); return *this;}
 *     virtual SenderReport *dup() const {return new SenderReport(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from SenderReport_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(SenderReport);
 * </pre>
 */
class INET_API SenderReport_Base : public ::cObject
{
  protected:
    uint64 NTPTimeStamp_var;
    uint32 RTPTimeStamp_var;
    uint32 packetCount_var;
    uint32 byteCount_var;

  private:
    void copy(const SenderReport_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SenderReport_Base&);
    // make constructors protected to avoid instantiation
    SenderReport_Base();
    SenderReport_Base(const SenderReport_Base& other);
    // make assignment operator protected to force the user override it
    SenderReport_Base& operator=(const SenderReport_Base& other);

  public:
    virtual ~SenderReport_Base();
    virtual SenderReport_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class SenderReport");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint64 getNTPTimeStamp() const;
    virtual void setNTPTimeStamp(uint64 NTPTimeStamp);
    virtual uint32 getRTPTimeStamp() const;
    virtual void setRTPTimeStamp(uint32 RTPTimeStamp);
    virtual uint32 getPacketCount() const;
    virtual void setPacketCount(uint32 packetCount);
    virtual uint32 getByteCount() const;
    virtual void setByteCount(uint32 byteCount);
};

/**
 * Class generated from <tt>transport/rtp/reports.msg</tt> by opp_msgc.
 * <pre>
 * class ReceptionReport
 * {
 *     @customize(true);
 * 
 *     
 *     uint32 ssrc;
 * 
 *     
 *     uint8 fractionLost;
 * 
 *     
 *     int packetsLostCumulative;
 * 
 *     
 *     uint32 sequenceNumber;
 * 
 *     
 *     int jitter;
 * 
 *     
 *     int lastSR;
 * 
 *     
 *     
 *     int delaySinceLastSR;
 * };
 * </pre>
 *
 * ReceptionReport_Base is only useful if it gets subclassed, and ReceptionReport is derived from it.
 * The minimum code to be written for ReceptionReport is the following:
 *
 * <pre>
 * class INET_API ReceptionReport : public ReceptionReport_Base
 * {
 *   private:
 *     void copy(const ReceptionReport& other) { ... }

 *   public:
 *     ReceptionReport() : ReceptionReport_Base() {}
 *     ReceptionReport(const ReceptionReport& other) : ReceptionReport_Base(other) {copy(other);}
 *     ReceptionReport& operator=(const ReceptionReport& other) {if (this==&other) return *this; ReceptionReport_Base::operator=(other); copy(other); return *this;}
 *     virtual ReceptionReport *dup() const {return new ReceptionReport(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from ReceptionReport_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(ReceptionReport);
 * </pre>
 */
class INET_API ReceptionReport_Base : public ::cObject
{
  protected:
    uint32 ssrc_var;
    uint8 fractionLost_var;
    int packetsLostCumulative_var;
    uint32 sequenceNumber_var;
    int jitter_var;
    int lastSR_var;
    int delaySinceLastSR_var;

  private:
    void copy(const ReceptionReport_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReceptionReport_Base&);
    // make constructors protected to avoid instantiation
    ReceptionReport_Base();
    ReceptionReport_Base(const ReceptionReport_Base& other);
    // make assignment operator protected to force the user override it
    ReceptionReport_Base& operator=(const ReceptionReport_Base& other);

  public:
    virtual ~ReceptionReport_Base();
    virtual ReceptionReport_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class ReceptionReport");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint32 getSsrc() const;
    virtual void setSsrc(uint32 ssrc);
    virtual uint8 getFractionLost() const;
    virtual void setFractionLost(uint8 fractionLost);
    virtual int getPacketsLostCumulative() const;
    virtual void setPacketsLostCumulative(int packetsLostCumulative);
    virtual uint32 getSequenceNumber() const;
    virtual void setSequenceNumber(uint32 sequenceNumber);
    virtual int getJitter() const;
    virtual void setJitter(int jitter);
    virtual int getLastSR() const;
    virtual void setLastSR(int lastSR);
    virtual int getDelaySinceLastSR() const;
    virtual void setDelaySinceLastSR(int delaySinceLastSR);
};


#endif // _REPORTS_M_H_
